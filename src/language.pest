// file = { SOI ~ NEWLINE* ~ import_section* ~ NEWLINE* ~ ty_struct_definition* ~ NEWLINE* ~ function_definition* ~ EOI }
// file = { SOI ~ NEWLINE* ~ import_section* ~ NEWLINE* ~ EOI }

file = { SOI ~ NEWLINE* ~ statement* ~ NEWLINE* ~ EOI }

COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ (!NEWLINE ~ ANY)*) }
WHITESPACE = _{ " " | "\t" ~ NEWLINE }

/// Visibility

visibility_public = { "public" }
visibility_private = { "private" }
visibility = { visibility_public | visibility_private }

/// Unary Operations

operation_pre_not = { "!" }

operation_post_increment = { "++" }
operation_post_decrement = { "--" }

/// Binary Operations

operation_and = { "&&" }
operation_or = { "||" }

operation_eq = { "==" }
operation_neq = { "!=" }

operation_geq = { ">=" }
operation_gt = { ">" }
operation_leq = { "<=" }
operation_lt = { "<" }

operation_add = { "+" }
operation_sub = { "-" }
operation_mul = { "*" }
operation_div = { "/" }
operation_pow = { "**" }

operation_binary = {
    operation_and | operation_or |
    operation_eq | operation_neq |
    operation_geq | operation_gt | operation_leq | operation_lt |
    operation_add | operation_sub | operation_mul | operation_div | operation_pow
}

// operation_add_assign = { "+=" }
// operation_sub_assign = { "-=" }
// operation_mul_assign = { "*=" }
// operation_div_assign = { "/=" }

/// Values

value_boolean = { "true" | "false" }
value_field = @{ "-"? ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) }

// TODO: Boolean array, field array

value = { value_boolean | value_field }

/// Variables

// TODO: Include "import" and "conditional"

protected_name = { visibility | value_boolean | "return" }

// keyword = @{ "as" | "in" | "return" | "export" | "false" |
//             "def" | "in" | "return" | "struct" | "true" }

variable = @{ ((!protected_name ~ ASCII_ALPHA) | (protected_name ~ (ASCII_ALPHANUMERIC | "_"))) ~ (ASCII_ALPHANUMERIC | "_")* }

/// Expressions

// Consider structs, conditionals, postfix, primary, inline array, array initializer, and unary
term = { value | variable | ("(" ~ expression ~ ")")  }

expression_not = { operation_pre_not ~ term }
expression_increment = { term ~ operation_post_increment }
expression_decrement = { term ~ operation_post_decrement }

expression_binary = { term ~ (operation_binary ~ term)* }

expression = { expression_not | expression_increment | expression_decrement | expression_binary }

expression_tuple = _{ (expression ~ ("," ~ expression)*)? }

/// Statements

statement_assign = { variable ~ "=" ~ expression }
statement_return = { "return" ~ expression_tuple }

statement = { statement_assign | statement_return }

// /// Conditionals
//
// conditional_if = { "if" }
// conditional_else = { "else" }
//
// conditional_for = { "for" }
//
// conditional = { conditional_if | conditional_else | conditional_for }

// /// Helpers
//
// helper_range = { expression+ ~ ".." ~ expression+ } // Confirm that '+' is the correct repetition
